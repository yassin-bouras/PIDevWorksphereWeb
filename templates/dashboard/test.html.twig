
{% block title %}WebSocket Communication{% endblock %}

{% block stylesheets %}
    <style>
        .connection-status {
            padding: 5px 10px;
            border-radius: 4px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .connection-status.connected {
            background-color: #d4edda;
            color: #155724;
        }
        .connection-status.disconnected {
            background-color: #f8d7da;
            color: #721c24;
        }
        #messageContainer {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
        }
        .message {
            margin: 5px 0;
            padding: 5px 10px;
            border-radius: 4px;
            word-wrap: break-word;
        }
        .message.sent {
            background-color: #e3f2fd;
            margin-left: 20%;
        }
        .message.received {
            background-color: #f5f5f5;
            margin-right: 20%;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid">
        <h1 class="h3 mb-2 text-gray-800">WebSocket Communication</h1>
        <p class="mb-4">Send and receive messages via WebSocket</p>

        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Messages</h6>
                <div id="connectionStatus" class="connection-status disconnected">
                    <i class="bi bi-x-circle"></i> Disconnected
                </div>
            </div>
            <div class="card-body">
                <div id="messageContainer"></div>
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button" id="sendButton">
                            <i class="bi bi-send"></i> Send
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let ws = null;
            const messageContainer = document.getElementById('messageContainer');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const connectionStatus = document.getElementById('connectionStatus');
            let reconnectAttempts = 0;
            const maxReconnectAttempts = 5;

            function addMessage(message, isSent = false) {
                const messageElement = document.createElement('div');
                messageElement.className = `message ${isSent ? 'sent' : 'received'}`;
                messageElement.textContent = message;
                messageContainer.appendChild(messageElement);
                messageContainer.scrollTop = messageContainer.scrollHeight;
            }

            function connect() {
                if (ws) {
                    ws.close();
                }

                try {
                    console.log('Connecting to WebSocket server...');
                    ws = new WebSocket('ws://127.0.0.1:8888');

                    ws.onopen = function() {
                        console.log('WebSocket Connected');
                        connectionStatus.className = 'connection-status connected';
                        connectionStatus.innerHTML = '<i class="bi bi-check-circle"></i> Connected';
                        reconnectAttempts = 0;
                    };

                    ws.onclose = function(event) {
                        console.log('WebSocket Disconnected:', event.code, event.reason);
                        connectionStatus.className = 'connection-status disconnected';
                        connectionStatus.innerHTML = '<i class="bi bi-x-circle"></i> Disconnected';
                        
                        // Try to reconnect
                        if (reconnectAttempts < maxReconnectAttempts) {
                            reconnectAttempts++;
                            console.log(`Attempting to reconnect (${reconnectAttempts}/${maxReconnectAttempts})...`);
                            setTimeout(connect, 2000);
                        }
                    };

                    ws.onerror = function(error) {
                        console.error('WebSocket Error:', error);
                    };

                    ws.onmessage = function(event) {
                        console.log('Received message:', event.data);
                        addMessage(event.data, false);
                    };
                } catch (error) {
                    console.error('WebSocket Connection Error:', error);
                    connectionStatus.className = 'connection-status disconnected';
                    connectionStatus.innerHTML = '<i class="bi bi-x-circle"></i> Connection Failed';
                    
                    if (reconnectAttempts < maxReconnectAttempts) {
                        reconnectAttempts++;
                        setTimeout(connect, 2000);
                    }
                }
            }

            function sendMessage() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    const message = messageInput.value.trim();
                    if (message) {
                        console.log('Sending message:', message);
                        ws.send(message);
                        addMessage(message, true);
                        messageInput.value = '';
                    }
                } else {
                    console.error('Cannot send: WebSocket is not connected');
                    alert('Not connected to server. Please wait for reconnection.');
                }
            }

            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // Start connection
            connect();

            // Add periodic connection check
            setInterval(function() {
                if ((!ws || ws.readyState !== WebSocket.OPEN) && reconnectAttempts < maxReconnectAttempts) {
                    console.log('Connection check: attempting to reconnect...');
                    connect();
                }
            }, 5000);
        });
    </script>
{% endblock %}
