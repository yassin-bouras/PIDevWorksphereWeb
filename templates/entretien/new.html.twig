{% extends '/dashboard/base.html.twig' %}

{% block title %}Nouvel Entretien{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .form-group {
            margin-bottom: 20px; /* Increased from 12px */
            padding: 10px 0; /* Add padding for spacing */
        }
        .form-row {
            margin-bottom: 20px; /* Add spacing below paired fields */
            padding: 0 10px; /* Add horizontal padding */
        }
        .form-col {
            padding: 0 15px; /* Add padding inside columns */
        }
        .form-btn {
            margin-top: 30px; /* Increased spacing above buttons */
            padding: 10px 0; /* Add padding for balance */
        }
        .alert-danger {
            background-color: #f8d7da;
            border: 1px solid #dc3545;
            color: #dc3545;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: none;
        }
        .alert-danger ul {
            margin: 0;
            padding-left: 20px;
        }
        .alert-danger li {
            margin-bottom: 5px;
        }
    </style>
{% endblock %}

{% block content %}
<div class="content container-fluid">
    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="breadcrumb-path mb-4">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_dashboard') }}">Accueil</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('app_entretien_index') }}">Entretiens</a></li>
                    <li class="breadcrumb-item active">Nouvel Entretien</li>
                </ul>
                <h3>Créer un Nouvel Entretien</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-titles">Créer un Entretien <span>Ajoutez les informations nécessaires pour organiser un entretien</span></h2>
                </div>
                <div class="card-body">
                    <div class="container">
                        <div class="form-header">
                            <h2>Créer un Entretien</h2>
                            <p>Ajoutez les informations nécessaires pour organiser un entretien</p>
                        </div>

                        <div class="alert-danger" id="errorMessages"></div>

                        {{ form_start(form, {'attr': {'id': 'entretienForm'}}) }}

                        <div class="form-group">
                            {{ form_label(form.titre) }}
                            {{ form_widget(form.titre, {'attr': {'class': 'form-control', 'placeholder': 'Titre de l\'entretien'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.description) }}
                            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'placeholder': 'Description détaillée', 'rows': 4}}) }}
                        </div>

                        <div class="form-row">
                            <div class="form-col">
                                <div class="form-group">
                                    {{ form_label(form.date_entretien) }}
                                    {{ form_widget(form.date_entretien, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                            <div class="form-col">
                                <div class="form-group">
                                    {{ form_label(form.heureentretien) }}
                                    {{ form_widget(form.heureentretien, {'attr': {'class': 'form-control'}}) }}
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            {{ form_label(form.type_entretien) }}
                            {{ form_widget(form.type_entretien, {'attr': {'class': 'form-control', 'placeholder': 'Type d\'entretien'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.offre) }}
                            {{ form_widget(form.offre, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.candidatId) }}
                            {{ form_widget(form.candidatId, {'attr': {'class': 'form-control', 'disabled': 'disabled'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.user) }}
                            {{ form_widget(form.user, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-btn">
                            <button type="submit" class="btn btn-apply w-auto">
                                <i class="fas fa-save"></i> {{ button_label|default('Créer l\'Entretien') }}
                            </button>
                            <a href="{{ path('app_entretien_index') }}" class="btn btn-secondary">
                                <i class="fas fa-times"></i> Annuler
                            </a>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const offreSelect = document.querySelector('[name="entretien[offre]"]');
    const candidatInput = document.querySelector('[name="entretien[candidatId]"]');

    offreSelect.addEventListener('change', function () {
        const selectedOffreId = this.value;

        const existingTempSelect = document.getElementById('temp-candidat-select');
        if (existingTempSelect) {
            existingTempSelect.remove();
        }

        if (selectedOffreId) {
            fetch(`/entretien/candidats/sans-entretien/${selectedOffreId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erreur lors de la récupération des candidats.");
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('API Response:', data); 

                    const tempSelect = document.createElement('select');
                    tempSelect.className = 'form-control';
                    tempSelect.id = 'temp-candidat-select';
                    tempSelect.name = 'temp-candidat-select'; 

                    if (data.length === 0) {
                        const option = document.createElement('option');
                        option.value = '';
                        option.textContent = 'Aucun candidat disponible';
                        tempSelect.appendChild(option);
                        tempSelect.disabled = true;
                    } else {
                        const defaultOption = document.createElement('option');
                        defaultOption.value = '';
                        defaultOption.textContent = 'Choisir un candidat';
                        defaultOption.disabled = true;
                        defaultOption.selected = true;
                        tempSelect.appendChild(defaultOption);

                        data.forEach(candidat => {
                            const option = document.createElement('option');
                            option.value = candidat.iduser; 
                            option.textContent = `${candidat.nom} ${candidat.prenom}`;
                            tempSelect.appendChild(option);
                        });

                        tempSelect.disabled = false; 
                    }

                    candidatInput.style.display = 'none';
                    candidatInput.parentNode.insertBefore(tempSelect, candidatInput.nextSibling);

                    tempSelect.addEventListener('change', function () {
                        candidatInput.value = this.value;
                        candidatInput.disabled = false; 
                    });

                    if (data.length > 0) {
                        candidatInput.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    const tempSelect = document.createElement('select');
                    tempSelect.className = 'form-control';
                    tempSelect.id = 'temp-candidat-select';
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Erreur de chargement';
                    tempSelect.appendChild(option);
                    tempSelect.disabled = true;
                    candidatInput.style.display = 'none';
                    candidatInput.parentNode.insertBefore(tempSelect, candidatInput.nextSibling);
                });
        } else {
            candidatInput.style.display = 'block';
            candidatInput.value = '';
            candidatInput.disabled = true; 
        }
    });

    const form = document.getElementById('entretienForm');
    const errorDiv = document.getElementById('errorMessages');

    form.addEventListener('submit', function (e) {
        let valid = true;
        let messages = [];

        errorDiv.style.display = 'none';
        errorDiv.innerHTML = '';
        const inputs = form.querySelectorAll('.form-control');
        inputs.forEach(input => input.classList.remove('is-invalid'));

        const titre = form.querySelector('[name="entretien[titre]"]');
        if (!titre.value.trim()) {
            valid = false;
            messages.push("Le titre est obligatoire.");
            titre.classList.add('is-invalid');
        } else if (titre.value.trim().length < 5) {
            valid = false;
            messages.push("Le titre doit contenir au moins 5 caractères.");
            titre.classList.add('is-invalid');
        }

        const description = form.querySelector('[name="entretien[description]"]');
        if (!description.value.trim()) {
            valid = false;
            messages.push("La description est obligatoire.");
            description.classList.add('is-invalid');
        } else if (description.value.trim().length < 10) {
            valid = false;
            messages.push("La description doit contenir au moins 10 caractères.");
            description.classList.add('is-invalid');
        }

        const dateEntretien = form.querySelector('[name="entretien[date_entretien]"]');
        if (!dateEntretien.value) {
            valid = false;
            messages.push("La date de l'entretien est obligatoire.");
            dateEntretien.classList.add('is-invalid');
        } else {
            const selectedDate = new Date(dateEntretien.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (selectedDate < today) {
                valid = false;
                messages.push("La date de l'entretien doit être aujourd'hui ou dans le futur.");
                dateEntretien.classList.add('is-invalid');
            }
        }

        const heureEntretien = form.querySelector('[name="entretien[heureentretien]"]');
        if (!heureEntretien.value) {
            valid = false;
            messages.push("L'heure de l'entretien est obligatoire.");
            heureEntretien.classList.add('is-invalid');
        }

        const typeEntretien = form.querySelector('[name="entretien[type_entretien]"]');
        if (!typeEntretien.value.trim()) {
            valid = false;
            messages.push("Le type d'entretien est obligatoire.");
            typeEntretien.classList.add('is-invalid');
        }

        const offre = form.querySelector('[name="entretien[offre]"]');
        if (!offre.value) {
            valid = false;
            messages.push("L'offre est obligatoire.");
            offre.classList.add('is-invalid');
        }

        const candidatId = form.querySelector('[name="entretien[candidatId]"]');
        if (!candidatId.value || isNaN(candidatId.value) || parseInt(candidatId.value) <= 0) {
            valid = false;
            messages.push("Le candidat est obligatoire et doit être un identifiant valide.");
            candidatId.classList.add('is-invalid');
            const tempSelect = document.getElementById('temp-candidat-select');
            if (tempSelect) tempSelect.classList.add('is-invalid');
        }

        const user = form.querySelector('[name="entretien[user]"]');
        if (!user.value) {
            valid = false;
            messages.push("L'employé est obligatoire.");
            user.classList.add('is-invalid');
        }

        if (!valid) {
            e.preventDefault();
            errorDiv.innerHTML = '<ul>' + messages.map(msg => `<li>${msg}</li>`).join('') + '</ul>';
            errorDiv.style.display = 'block';
            window.scrollTo({ top: errorDiv.offsetTop - 20, behavior: 'smooth' });
        }
    });
});
</script>
{% endblock %}