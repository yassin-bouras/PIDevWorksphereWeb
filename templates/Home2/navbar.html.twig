<header class="header-area header-sticky wow slideInDown" data-wow-duration="0.75s" data-wow-delay="0s">
    <!-- Add styles for loading overlay -->
    <style>
        /* Full page loading overlay */
        #auth-loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }

        .auth-spinner {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            border: 4px solid transparent;
            border-top: 4px solid #4771cb;
            border-bottom: 4px solid #33ccc5;
            animation: auth-spin 1.2s linear infinite;
        }

        .auth-spinner::after {
            content: "";
            position: absolute;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            border: 4px solid transparent;
            border-left: 4px solid #4771cb;
            border-right: 4px solid #33ccc5;
            top: 5px;
            left: 5px;
            animation: auth-spin-reverse 0.8s linear infinite;
        }

        @keyframes auth-spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes auth-spin-reverse {
            0% {
                transform: rotate(360deg);
            }

            100% {
                transform: rotate(0deg);
            }
        }

        /* Hide the login button initially */
        #default-login-button {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        #default-login-button.loaded {
            opacity: 1;
        }

        /* Smooth transition for button text change */
        .main-blue-button a {
            transition: all 0.3s ease;
        }
    </style>

    <!-- Full page loading overlay -->
    <div id="auth-loading-overlay">
        <div class="auth-spinner"></div>
    </div>
    <div class="container">
        <div class="row">
            <div class="col-12">
                <nav class="main-nav">
                    <!-- ***** Logo Start ***** -->
                    <a href="{{ path('app_home') }}" class="logo">
                        <h4>Worksphere <img src="{{ asset('front/images/logo-icon.png') }}" alt=""></h4>
                    </a>
                    <!-- ***** Logo End ***** -->

                    <!-- ***** Menu Start ***** -->
                    <ul class="nav" id="sidebar-links">
                        <li class="scroll-to-section"><a href="{{ path('app_home') }}">Home</a></li>
                        <li class="scroll-to-section"><a href="{{ path('app_offre_front_index') }}">Offre d'Emploi</a>
                        </li>
                        <li class="scroll-to-section"><a href="{{ path('app_candidature_index') }}">Mes Candidatures</a>
                        </li>
                        <li class="scroll-to-section"><a href="/user/${user.iduser}">>Profil</a></li>

                        <!-- Login button that will be replaced after authentication -->
                        <li class="scroll-to-section" id="default-login-button">
                            <div class="main-blue-button">
                                <a href="/login">Se Connecter</a>
                            </div>
                        </li>
                    </ul>
                    <a class="menu-trigger">
                        <span>Menu</span>
                    </a>
                    <!-- ***** Menu End ***** -->
                </nav>
            </div>
        </div>
    </div>

    <script>
    // Utility function to get cookies
    function getCookie(name) {
        let cookieArray = document.cookie.split('; ');
        let cookie = cookieArray.find(row => row.startsWith(name + '='));
        return cookie ? decodeURIComponent(cookie.split('=')[1]) : null;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const token = getCookie('BEARER');
        const loginButton = document.getElementById('default-login-button');
        const profileLink = document.querySelector('a[href="/user/${user.iduser}"]');
        const loadingOverlay = document.getElementById('auth-loading-overlay');

        // Function to hide the loading overlay
        function hideLoadingOverlay() {
            if (loadingOverlay) {
                loadingOverlay.style.display = 'none';
            }
        }

        if (!token) {
            // No token, show login button and hide loading overlay
            if (loginButton) {
                loginButton.classList.add('loaded');
            }
            hideLoadingOverlay();
            return;
        }

        // Fetch user data from the /jwt/user endpoint
        fetch('/jwt/user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ token: token }) // Pass the token from cookies
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const user = data.user;

                // Update the profile link
                if (profileLink) {
                    profileLink.href = `/user/${user.iduser}`;
                }

                // Replace login button with logout button
                if (loginButton) {
                    loginButton.innerHTML = `
                        <div class="main-blue-button">
                            <a href="/logout">Se d√©connecter</a>
                        </div>
                    `;
                }
            } else {
                console.error('Failed to fetch user data:', data.error);
            }
        })
        .catch(error => {
            console.error('Error fetching user data:', error);
        })
        .finally(() => {
            // Hide the loading overlay regardless of success or failure
            hideLoadingOverlay();
        });
    });
</script>
</header>