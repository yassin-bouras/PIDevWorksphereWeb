<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nouvel Événement</title>
    <style>
        :root {
            --primary-color: #2c5aa0;
            --secondary-color: #4a90e2;
            --accent-color: #ff6b35;
            --light-gray: #f5f7fa;
            --medium-gray: #e1e5eb;
            --dark-gray: #6c757d;
            --text-color: #2d3748;
            --success-color: #28a745;
            --error-color: #dc3545;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            color: var(--text-color);
            background-image: url('https://www.bgm0726.fr/uploads/lep_content/.thumbs/rh-5f89e-1000x_-90-scale-ffffff-wCopyright.png?1610684035');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            min-height: 100vh;
            display: flex;
            align-items: flex-start;
        }

        .overlay {
            background: linear-gradient(135deg, rgba(44, 90, 160, 0.85) 0%, rgba(74, 144, 226, 0.85) 100%);
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .container {
            max-width: 800px;
            margin: 40px auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            position: relative;
            z-index: 1;
        }

        h1 {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 25px;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid var(--medium-gray);
            border-radius: 6px;
            font-size: 0.95rem;
            transition: all 0.3s;
        }

        .form-control:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
        }

        .is-invalid {
            border-color: var(--error-color) !important;
        }

        .is-valid {
            border-color: var(--success-color) !important;
        }

        .invalid-feedback {
            display: none;
            color: var(--error-color);
            font-size: 0.85rem;
            margin-top: 5px;
        }

        .was-validated .form-control:invalid ~ .invalid-feedback {
            display: block;
        }

        .btn {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
            padding: 12px 20px;
            font-size: 1rem;
            border-radius: 6px;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
        }

        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: var(--secondary-color);
            text-decoration: none;
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="overlay"></div>
    <div class="container">
        <h1>Créer un nouvel événement</h1>

        {{ form_start(form, {'attr': {'id': 'event-form', 'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
            
            <div class="form-group">
                {{ form_label(form.nomEvent) }}
                {{ form_widget(form.nomEvent, {
                    'attr': {
                        'class': 'form-control',
                        'required': 'required',
                        'minlength': '3'
                    }
                }) }}
                <div class="invalid-feedback">
                    Le nom doit contenir au moins 3 caractères
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.descEvent) }}
                {{ form_widget(form.descEvent, {
                    'attr': {
                        'class': 'form-control',
                        'required': 'required',
                        'minlength': '10'
                    }
                }) }}
                <div class="invalid-feedback">
                    La description doit contenir au moins 10 caractères
                </div>
            </div>

            <div class="form-row" style="display: flex; gap: 15px;">
                <div class="form-group" style="flex: 1;">
                    {{ form_label(form.dateEvent) }}
                    {{ form_widget(form.dateEvent, {
                        'attr': {
                            'class': 'form-control',
                            'required': 'required'
                        }
                    }) }}
                    <div class="invalid-feedback">
                        La date doit être dans le futur
                    </div>
                </div>
                <div class="form-group" style="flex: 1;">
                    {{ form_label(form.capaciteEvent) }}
                    {{ form_widget(form.capaciteEvent, {
                        'attr': {
                            'class': 'form-control',
                            'required': 'required',
                            'min': '1'
                        }
                    }) }}
                    <div class="invalid-feedback">
                        La capacité doit être supérieure à 0
                    </div>
                </div>
            </div>

            <div class="form-group">
                {{ form_label(form.lieuEvent) }}
                {{ form_widget(form.lieuEvent, {
                    'attr': {
                        'class': 'form-control',
                        'required': 'required',
                        'minlength': '3'
                    }
                }) }}
                <div class="invalid-feedback">
                    Le lieu doit contenir au moins 3 caractères
                </div>
            </div>

            <button type="submit" class="btn">Créer l'événement</button>
        {{ form_end(form) }}

        <a href="{{ path('app_evennement_index') }}" class="back-link">← Retour à la liste</a>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('event-form');
            
            // Validation en temps réel
            form.querySelectorAll('.form-control').forEach(input => {
                // Validation quand on quitte le champ
                input.addEventListener('blur', function() {
                    validateField(this);
                });
                
                // Validation pendant la saisie après une erreur
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        validateField(this);
                    }
                });
            });

            // Validation de la date future
            const dateField = document.querySelector('[name$="[dateEvent]"]');
            if (dateField) {
                dateField.addEventListener('change', function() {
                    validateDateField(this);
                });
            }

            // Validation au submit
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                
                form.classList.add('was-validated');
                
                // Valider tous les champs
                form.querySelectorAll('.form-control').forEach(validateField);
                if (dateField) validateDateField(dateField);
            });

            function validateField(field) {
                field.classList.remove('is-valid', 'is-invalid');
                
                if (field.checkValidity()) {
                    field.classList.add('is-valid');
                } else {
                    field.classList.add('is-invalid');
                }
            }

            function validateDateField(field) {
                const selectedDate = new Date(field.value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                field.classList.remove('is-valid', 'is-invalid');
                
                if (selectedDate >= today) {
                    field.classList.add('is-valid');
                } else {
                    field.classList.add('is-invalid');
                    field.setCustomValidity('Invalid');
                }
            }
        });
    </script>
</body>
</html>