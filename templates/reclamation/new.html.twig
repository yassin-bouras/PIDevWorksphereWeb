{% extends '/dashboard/base2.html.twig' %}

{% block title %}Nouvelle Réclamation{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .form-group {
            margin-bottom: 20px; /* Increased from 12px */
            padding: 10px 0; /* Add padding for spacing */
        }
        .form-row {
            margin-bottom: 20px; /* Add spacing below paired fields */
            padding: 0 10px; /* Add horizontal padding */
        }
        .form-col {
            padding: 0 15px; /* Add padding inside columns */
        }
        .form-btn {
            margin-top: 30px; /* Increased spacing above buttons */
            padding: 10px 0; /* Add padding for balance */
        }
        .alert-danger {
            background-color: #f8d7da;
            border: 1px solid #dc3545;
            color: #dc3545;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: none;
        }
        .alert-danger ul {
            margin: 0;
            padding-left: 20px;
        }
        .alert-danger li {
            margin-bottom: 5px;
        }
    </style>
{% endblock %}

{% block content %}
<div class="content container-fluid">
    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="breadcrumb-path mb-4">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_dashboard') }}">Accueil</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('reclamations_by_user', {'id': id_user}) }}">Mes Réclamations</a></li>
                    <li class="breadcrumb-item active">Nouvelle Réclamation</li>
                </ul>
                <h3>Créer une Nouvelle Réclamation</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-titles">Créer une Réclamation <span>Ajoutez les informations nécessaires pour soumettre une réclamation</span></h2>
                </div>
                <div class="card-body">
                    <div class="container">
                        <div class="form-header">
                            <h2>Créer une Réclamation</h2>
                            <p>Ajoutez les informations nécessaires pour soumettre une réclamation</p>
                        </div>

                        <div class="alert-danger" id="errorMessages"></div>

                        {{ form_start(form, {'attr': {'id': 'reclamationForm'}}) }}

                        <div class="form-group">
                            {{ form_label(form.titre) }}
                            {{ form_widget(form.titre, {'attr': {'class': 'form-control', 'placeholder': 'Titre de la réclamation'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.description) }}
                            {{ form_widget(form.description, {'attr': {'class': 'form-control', 'placeholder': 'Description détaillée', 'rows': 4}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.type) }}
                            {{ form_widget(form.type, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.datedepot) }}
                            {{ form_widget(form.datedepot, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.user) }}
                            {{ form_widget(form.user, {'attr': {'class': 'form-control', 'disabled': 'disabled'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_label(form.receiver) }}
                            {{ form_widget(form.receiver, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-btn">
                            <button type="submit" class="btn btn-apply w-auto">
                                <i class="fas fa-save"></i> {{ button_label|default('Créer la Réclamation') }}
                            </button>
                            <a href="{{ path('reclamations_by_user', {'id': id_user}) }}" class="btn btn-secondary">
                                <i class="fas fa-times"></i> Annuler
                            </a>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('reclamationForm');
    const errorDiv = document.getElementById('errorMessages');

    form.addEventListener('submit', function (e) {
        let valid = true;
        let messages = [];

        errorDiv.style.display = 'none';
        errorDiv.innerHTML = '';
        const inputs = form.querySelectorAll('.form-control');
        inputs.forEach(input => input.classList.remove('is-invalid'));

        const titre = form.querySelector('[name="reclamation[titre]"]');
        if (!titre.value.trim()) {
            valid = false;
            messages.push("Le titre est obligatoire.");
            titre.classList.add('is-invalid');
        } else if (titre.value.trim().length < 5) {
            valid = false;
            messages.push("Le titre doit contenir au moins 5 caractères.");
            titre.classList.add('is-invalid');
        }

        const description = form.querySelector('[name="reclamation[description]"]');
        if (!description.value.trim()) {
            valid = false;
            messages.push("La description est obligatoire.");
            description.classList.add('is-invalid');
        } else if (description.value.trim().length < 10) {
            valid = false;
            messages.push("La description doit contenir au moins 10 caractères.");
            description.classList.add('is-invalid');
        }

        const type = form.querySelector('[name="reclamation[type]"]');
        if (!type.value.trim()) {
            valid = false;
            messages.push("Le type est obligatoire.");
            type.classList.add('is-invalid');
        } else if (!['technique', 'administratif', 'autre'].includes(type.value.trim())) {
            valid = false;
            messages.push("Le type doit être l'un des suivants : technique, administratif, autre.");
            type.classList.add('is-invalid');
        }

        const datedepot = form.querySelector('[name="reclamation[datedepot]"]');
        if (!datedepot.value) {
            valid = false;
            messages.push("La date de dépôt est obligatoire.");
            datedepot.classList.add('is-invalid');
        } else {
            const selectedDate = new Date(datedepot.value);
            const now = new Date();
            if (selectedDate > now) {
                valid = false;
                messages.push("La date de dépôt ne peut pas être dans le futur.");
                datedepot.classList.add('is-invalid');
            }
        }

        const user = form.querySelector('[name="reclamation[user]"]');
        if (!user.value || isNaN(user.value) || parseInt(user.value) <= 0) {
            valid = false;
            messages.push("L'utilisateur est obligatoire et doit être un identifiant valide.");
            user.classList.add('is-invalid');
        }

        const receiver = form.querySelector('[name="reclamation[receiver]"]');
        if (!receiver.value || isNaN(receiver.value) || parseInt(receiver.value) <= 0) {
            valid = false;
            messages.push("Le destinataire est obligatoire et doit être un identifiant valide.");
            receiver.classList.add('is-invalid');
        }

        if (!valid) {
            e.preventDefault();
            errorDiv.innerHTML = '<ul>' + messages.map(msg => `<li>${msg}</li>`).join('') + '</ul>';
            errorDiv.style.display = 'block';
            window.scrollTo({ top: errorDiv.offsetTop - 20, behavior: 'smooth' });
        }
    });
});
</script>
{% endblock %}