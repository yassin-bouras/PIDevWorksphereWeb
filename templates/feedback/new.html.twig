{% extends '/dashboard/base.html.twig' %}

{% block title %}Créer un Feedback{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Existing styles... */
        .form-group {
            margin-bottom: 20px;
            padding: 10px 0;
        }
        .form-btn {
            margin-top: 30px;
            padding: 10px 0;
        }
        /* ... other existing styles ... */

        /* New styles for radio questions */
        .questions-container {
            margin: 25px 0;
        }

        .question-item {
            margin-bottom: 25px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        .question-text {
            font-weight: 500;
            color: #495057;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .radio-options {
            display: flex;
            gap: 25px;
            padding-left: 10px;
        }

        .radio-option {
            display: flex;
            align-items: center;
        }

        .radio-option input[type="radio"] {
            margin-right: 8px;
            width: 16px;
            height: 16px;
        }

        .radio-option label {
            margin-bottom: 0;
            cursor: pointer;
            font-size: 15px;
            color: #495057;
        }

        /* Style for invalid radio groups */
        .is-invalid .question-item {
            border: 2px solid #ffc107;
            background-color: #fff3cd;
        }
    </style>
{% endblock %}

{% block content %}
<div class="content container-fluid">
    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="breadcrumb-path mb-4">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_dashboard') }}">Accueil</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('entretien_by_employee') }}">Feedbacks</a></li>
                    <li class="breadcrumb-item active">Créer un Feedback</li>
                </ul>
                <h3>Créer un Nouveau Feedback</h3>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-12 col-sm-12 col-12">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-titles">Créer un Feedback <span>Ajoutez les informations nécessaires pour le feedback</span></h2>
                </div>
                <div class="card-body">
                    <div class="container">
                        <h1>Créer un Feedback</h1>

                        {% if entretien %}
                            <p class="p" color: #6c757d; ">
                                Pour l'entretien : <strong>{{ entretien.titre }}</strong>
                            </p>
                        {% endif %}

                        <div class="alert-warning" id="warningMessages"></div>

                        {{ form_start(form, {'attr': {'id': 'feedbackForm', 'novalidate': 'novalidate'}}) }}

                        <div class="form-group">
                            {{ form_label(form.message) }}
                            {{ form_widget(form.message, {'attr': {'class': 'form-control', 'placeholder': 'Votre message...', 'id': 'message', 'rows': '4'}}) }}
                        </div>


                      <div class="questions-container">
                            {% for i in 1..5 %}
                                <div class="form-group">
                                    <div class="question-item">
                                        <div class="question-text">
                                            {{ attribute(form, 'q' ~ i).vars.label }}
                                        </div>
                                        <div class="radio-options">
                                            {% for child in attribute(form, 'q' ~ i) %}
                                                <div class="radio-option">
                                                    {{ form_widget(child) }}
                                                    {{ form_label(child) }}
                                                </div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>

                        

                        {% if entretien %}
                            <input type="hidden" name="entretien" value="{{ entretien.id }}">
                        {% else %}
                            {{ form_widget(form.entretien, {'attr': {'class': 'form-control', 'id': 'entretien'}}) }}
                        {% endif %}

                        <div class="form-btn">
                            <button type="submit" class="btn btn-apply w-auto">
                                <i class="fas fa-save"></i> {{ button_label|default('Enregistrer le Feedback') }}
                            </button>
                            <a href="{{ path('entretien_by_employee') }}" class="btn btn-secondary">
                                <i class="fas fa-times"></i> Annuler
                            </a>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('feedbackForm');
    const warningDiv = document.getElementById('warningMessages');

    form.addEventListener('submit', function (e) {
        let valid = true;
        let messages = [];

        warningDiv.style.display = 'none';
        warningDiv.innerHTML = '';
        const inputs = form.querySelectorAll('.form-control');
        inputs.forEach(input => input.classList.remove('is-invalid'));

        const message = document.querySelector('[id$="_message"]');

        // Validation du message
        if (!message.value.trim()) {
            valid = false;
            messages.push("Le message est obligatoire.");
            message.classList.add('is-invalid');
        } else if (message.value.trim().length < 10) {
            valid = false;
            messages.push("Le message doit contenir au moins 10 caractères.");
            message.classList.add('is-invalid');
        }

        // Validation des questions
        for (let i = 1; i <= 5; i++) {
            const radios = document.querySelectorAll(`[name$="[q${i}]"]`);
            let isChecked = false;
            radios.forEach(radio => {
                if (radio.checked) {
                    isChecked = true;
                }
            });

            if (!isChecked) {
                valid = false;
                messages.push(`Veuillez répondre à la Question ${i}.`);

                // Ajouter une classe pour surligner la question non répondue
                radios.forEach(radio => {
                    const questionItem = radio.closest('.question-item');
                    if (questionItem) {
                        questionItem.classList.add('is-invalid');
                    }
                });
            }
        }

        if (!valid) {
            e.preventDefault();
            warningDiv.innerHTML = '<ul>' + messages.map(msg => `<li>${msg}</li>`).join('') + '</ul>';
            warningDiv.style.display = 'block';
            window.scrollTo({ top: warningDiv.offsetTop - 20, behavior: 'smooth' });
        }
    });
});
</script>

{% endblock %}